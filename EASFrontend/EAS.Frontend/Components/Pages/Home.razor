@page "/search"

@inject AttendanceClient attendanceClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Search Attendance</PageTitle>

<SearchFilters Attendances="@attendanceSummaries" @bind-SearchName="@SearchName" @bind-FromDate="FromDate"
    @bind-ToDate="ToDate" OnSearch="HandleSearchAsync">
</SearchFilters>

@if (filteredAttendanceSummaries is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="table-responsive">
        <table id="index-table" class="table table-striped table-bordered table-hover mt-3">
            <thead class="table-dark">
                <tr>
                    <th>#</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Mobile</th>
                    <th>IP Address</th>
                    <th>Present</th>
                    <th>Created On</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @{
                    var index = 0;
                }
                @foreach (var attendance in filteredAttendanceSummaries)
                {
                    <tr>
                        <td>@(++index)</td>
                        <td>@attendance.Name</td>
                        <td>@attendance.EmailId</td>
                        <td>@attendance.MobileNumber</td>
                        <td>@attendance.IPAddress</td>
                        <td>
                            @if (attendance.IsPresent)
                            {
                                <span class="badge text-bg-success">Present</span>
                            }
                            else
                            {
                                <span class="badge text-bg-danger">Absent</span>
                            }
                        </td>
                        <td>@attendance.CreatedOn.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>
                            <div class="d-flex">
                                <button class="btn btn-secondary" data-bs-toggle="modal"
                                    data-bs-target="@GetUpdateModalId(attendance)">
                                    @(attendance.IsPresent ? "Mark Absent" : "Mark Present")
                                </button>
                                <UpdateAttendance Attendance="@attendance" />
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private AttendanceSummary[]? attendanceSummaries;
    private AttendanceSummary[]? filteredAttendanceSummaries;

    private string SearchName { get; set; } = string.Empty;
    private DateTime? FromDate { get; set; }
    private DateTime? ToDate { get; set; }
    protected override async Task OnInitializedAsync()
    {
        attendanceSummaries = await attendanceClient.GetAttendanceSummariesAsync();
        filteredAttendanceSummaries = attendanceSummaries;
    }

    private string GetUpdateModalId(AttendanceSummary attendance)
    {
        return $"#{UpdateAttendance.GetModalId(attendance)}";
    }

    private async Task HandleSearchAsync()
    {
        if (string.IsNullOrWhiteSpace(SearchName) && FromDate is null && ToDate is null)
        {
            filteredAttendanceSummaries = attendanceSummaries;
        }
        else
        {
            filteredAttendanceSummaries = await attendanceClient.GetAttendanceSearchAsync(new AttendanceFilters
            {
                SearchName = SearchName,
                FromDate = FromDate,
                ToDate = ToDate
            });
        }
    }
}

@inject AttendanceClient AttendanceClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<!-- SearchFilters.razor -->
<div class="row mt-3">
    <div class="col-md-3 mb-3">
        <input type="text" class="form-control" placeholder="Search by name" value="@SearchName"
            @oninput="e => SearchNameChanged.InvokeAsync(e.Value?.ToString())" />
    </div>
    <div class="col-md-3 mb-3">
        <input type="date" class="form-control" value="@FromDateString" @oninput="OnFromDateChanged" />
    </div>
    <div class="col-md-3 mb-3">
        <input type="date" class="form-control" value="@ToDateString" @oninput="OnToDateChanged" />
    </div>
    <div class="col-md-3 mb-3">
        <button class="btn btn-primary" @onclick="OnSearchClicked">Search</button>
    </div>
</div>

@code {
    [Parameter] public string SearchName { get; set; } = string.Empty;
    [Parameter] public DateTime? FromDate { get; set; }
    [Parameter] public DateTime? ToDate { get; set; }

    [Parameter]
    public AttendanceSummary[]? Attendances { get; set; }

    [Parameter] public EventCallback<string> SearchNameChanged { get; set; }
    [Parameter] public EventCallback<DateTime?> FromDateChanged { get; set; }
    [Parameter] public EventCallback<DateTime?> ToDateChanged { get; set; }

    [Parameter]
    public EventCallback OnSearch { get; set; }

    private string? FromDateString => FromDate?.ToString("yyyy-MM-dd");
    private string? ToDateString => ToDate?.ToString("yyyy-MM-dd");

    private async Task OnFromDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e?.Value?.ToString(), out var parsed))
            await FromDateChanged.InvokeAsync(parsed);
        else
            await FromDateChanged.InvokeAsync(null);
    }

    private async Task OnToDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e?.Value?.ToString(), out var parsed))
            await ToDateChanged.InvokeAsync(parsed);
        else
            await ToDateChanged.InvokeAsync(null);
    }

    private async Task OnSearchClicked() => await OnSearch.InvokeAsync();
}